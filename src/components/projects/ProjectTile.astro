---
import { Image } from 'astro:assets';
import Button from '@components/Button.astro';

import type { CollectionEntry } from 'astro:content';
interface Props {
  project: CollectionEntry<'projects'>;
}

const { project } = Astro.props;
const { data, slug } = project;
const { title, description, primaryImage, color } = data;
const url = '/projects/' + slug;
---

<div
  class="container"
  data-project-tile={slug}
  transition:name={`project-tile-${slug}`}
>
  <div class="content">
    {
      primaryImage ? (
        <Image
          src={primaryImage}
          quality={100}
          class="project-image"
          alt={title}
          data-project-image={slug}
        />
      ) : (
        <div class="project-image" />
      )
    }
    <div class="title-container">
      <h2 class="title">
        <a href={url}>{title}</a>
      </h2>
    </div>
    <div class="description">
      <p>{description || ''}</p>
    </div>
    <Button
      color={color!}
      href={url}
      color={color}
      aria-label={`Details about ${title}`}
    >
      Details
    </Button>
  </div>
</div>

<style define:vars={{ 'primary-color': color }}>
  .container {
    display: block;
    position: relative;
    --gap: 10px;
    --border-radius: 20px;
    --content-gap: 20px;
    border-radius: var(--border-radius);
    color: #fff;
    &:before {
      content: '';
      position: absolute;
      z-index: 0;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: linear-gradient(
        0.5turn,
        var(--primary-color),
        color-mix(in srgb, var(--primary-color) 50%, black)
      );
      box-shadow: inset 0 0 0 1px rgba(0, 0, 0, 0.7);
      border-radius: var(--border-radius);
    }
    &:after {
      content: '';
      position: absolute;
      z-index: 0;
      top: var(--gap);
      left: var(--gap);
      right: var(--gap);
      bottom: var(--gap);
      background: #151515;
      border-radius: var(--border-radius);
    }
    &:nth-of-type(even) .project-image {
      clip-path: polygon(0 0, 100% 0, 100% 100%, 0 calc(100% - 50px));
    }
  }

  .content {
    position: relative;
    z-index: 1;
    text-align: center;
    margin: var(--gap);
    border-radius: var(--border-radius);
    overflow: hidden;
    padding: 0 0 var(--content-gap);
  }

  .project-image {
    position: relative;
    width: 100%;
    max-height: 200px;
    min-height: 150px;
    background: var(--primary-color);
    object-fit: cover;
    object-position: top left;
    clip-path: polygon(0 0, 100% 0, 100% calc(100% - 50px), 0 100%);
    contain: paint;
  }

  .title-container {
    --pill-size: 6px;
    position: relative;
    z-index: 1;
    margin: 0 auto;
    width: 100%;
    max-width: 300px;
    margin-top: -50px;
    padding-bottom: calc(calc(var(--content-gap) / 2) + var(--pill-size));
    margin-bottom: calc(var(--content-gap) / 2);
    &:before {
      content: '';
      position: absolute;
      bottom: 0;
      height: var(--pill-size);
      width: 40px;
      left: 50%;
      transform: translateX(-50%);
      background: var(--primary-color);
      border-radius: 5px;
    }
  }
  .title {
    background: rgba(0, 0, 0, 0.8);
    border-radius: 5px;
    padding: 5px 10px;
    line-height: 44px;
    box-decoration-break: clone;
    margin: 0;
    /* requires prefix for padding on all lines */
    -webkit-box-decoration-break: clone;
    display: inline;
    a {
      all: unset;
      cursor: pointer;
      &:focus-visible {
        text-decoration: underline;
      }
    }
  }
  .description {
    margin: 0 30px var(--content-gap);
    > p {
      margin: 0;
    }
  }
</style>
