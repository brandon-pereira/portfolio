---
import { Image } from 'astro:assets';
import Button from '@components/Button.astro';
import type { CollectionEntry } from 'astro:content';
import type { AstroComponentFactory } from 'astro/runtime/server/index.js';
import Lightbox from '@components/Lightbox.astro';
interface Props {
  project: CollectionEntry<'projects'>;
  content: AstroComponentFactory;
}
const { data, slug } = Astro.props.project;
const { link, color, images, gitUrl, title, languages } = data;
const Content = Astro.props.content;
---

<div
  class="container"
  data-project-details={slug}
  transition:name={`project-tile-${slug}`}
>
  <div class="content">
    {
      images.at(0) ? (
        <Image
          src={images.at(0)!.url}
          width={1200}
          alt={title}
          class="project-image"
          data-project-image={slug}
        />
      ) : (
        <div class="project-image" />
      )
    }
    <div class="title-container">
      <h2 class="title">
        {title}
      </h2>
    </div>
    <div class="description">
      <Content />
      <div class="buttons">
        {
          link && (
            <Button color={color} href={link} target="_blank">
              View Project
            </Button>
          )
        }
        {
          gitUrl && (
            <Button
              color={color}
              href={gitUrl}
              target="_blank"
              rel="noopener noreferrer"
              data-project-link={slug}
              class="githubLink"
            >
              <svg
                style="height: 16px; width: 16px;"
                width="98"
                height="96"
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 98 96"
              >
                <path
                  fill-rule="evenodd"
                  clip-rule="evenodd"
                  d="M48.854 0C21.839 0 0 22 0 49.217c0 21.756 13.993 40.172 33.405 46.69 2.427.49 3.316-1.059 3.316-2.362 0-1.141-.08-5.052-.08-9.127-13.59 2.934-16.42-5.867-16.42-5.867-2.184-5.704-5.42-7.17-5.42-7.17-4.448-3.015.324-3.015.324-3.015 4.934.326 7.523 5.052 7.523 5.052 4.367 7.496 11.404 5.378 14.235 4.074.404-3.178 1.699-5.378 3.074-6.6-10.839-1.141-22.243-5.378-22.243-24.283 0-5.378 1.94-9.778 5.014-13.2-.485-1.222-2.184-6.275.486-13.038 0 0 4.125-1.304 13.426 5.052a46.97 46.97 0 0 1 12.214-1.63c4.125 0 8.33.571 12.213 1.63 9.302-6.356 13.427-5.052 13.427-5.052 2.67 6.763.97 11.816.485 13.038 3.155 3.422 5.015 7.822 5.015 13.2 0 18.905-11.404 23.06-22.324 24.283 1.78 1.548 3.316 4.481 3.316 9.126 0 6.6-.08 11.897-.08 13.526 0 1.304.89 2.853 3.316 2.364 19.412-6.52 33.405-24.935 33.405-46.691C97.707 22 75.788 0 48.854 0z"
                  fill="currentColor"
                />
              </svg>
              View on GitHub
            </Button>
          )
        }
      </div>
      <div class="languages">
        {languages?.map(lang => <div class="language">{lang}</div>)}
      </div>
      {
        images?.length && (
          <div class="image-container">
            {images?.map(img => (
              <Lightbox
                description={img.title}
                src={img.url}
                alt={img.title}
                thumbProps={{
                  width: img.url.height < img.url.width ? 500 : undefined,
                  height: img.url.height > img.url.width ? 500 : undefined,
                  quality: 'max'
                }}
              />
            ))}
          </div>
        )
      }
    </div>
  </div>
</div>

<style define:vars={{ 'primary-color': color }}>
  .container {
    display: block;
    position: relative;
    --gap: 10px;
    --border-radius: 20px;
    --content-gap: 20px;
    border-radius: var(--border-radius);
    color: #fff;
    max-width: var(--max-width);
    margin: 0 auto 5rem;
    &:before {
      content: '';
      position: absolute;
      z-index: 0;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: linear-gradient(
        0.5turn,
        var(--primary-color),
        color-mix(in srgb, var(--primary-color) 50%, black)
      );
      box-shadow: inset 0 0 0 1px rgba(0, 0, 0, 0.7);
      border-radius: var(--border-radius);
    }
    &:after {
      content: '';
      position: absolute;
      z-index: 0;
      top: var(--gap);
      left: var(--gap);
      right: var(--gap);
      bottom: var(--gap);
      background: var(--background-color);
      border-radius: var(--border-radius);
    }
    &:nth-of-type(even) .project-image {
      clip-path: polygon(0 0, 100% 0, 100% 100%, 0 calc(100% - 50px));
    }
  }

  .content {
    position: relative;
    z-index: 1;
    text-align: left;
    margin: var(--gap);
    border-radius: var(--border-radius);
    overflow: hidden;
    padding: 0 0 var(--content-gap);
  }

  .project-image {
    height: auto;
    position: relative;
    width: 100%;
    min-height: 200px;
    object-fit: cover;
    object-position: top left;
    clip-path: polygon(0 0, 100% 0, 100% calc(100% - 50px), 0 100%);
    contain: paint;
    margin-top: var(--gap);
    border-radius: var(--border-radius) var(--border-radius) 0 0;
    background: var(--primary-color);
  }

  .title-container {
    --pill-size: 6px;
    position: relative;
    z-index: 1;
    text-align: center;
    margin: 0 auto;
    width: 100%;
    max-width: 300px;
    width: fit-content;
    margin-top: -50px;
    padding-bottom: calc(calc(var(--content-gap) / 2) + var(--pill-size));
    margin-bottom: calc(var(--content-gap) / 2);
    &:before {
      content: '';
      position: absolute;
      bottom: 0;
      height: var(--pill-size);
      width: 40px;
      left: 50%;
      transform: translateX(-50%);
      background: var(--primary-color);
      border-radius: 5px;
    }
  }
  .title {
    background: rgba(0, 0, 0, 0.8);
    border-radius: 5px;
    padding: 5px 10px;
    line-height: 44px;
    box-decoration-break: clone;
    margin: 0;
    /* requires prefix for padding on all lines */
    -webkit-box-decoration-break: clone;
    display: inline;
  }
  .description {
    margin: 0 30px var(--content-gap);
    > p {
      margin: 0;
    }
  }

  .buttons {
    display: flex;
    gap: 0.6rem;
    margin: 1.5rem 0 0;
  }

  .image-container {
    margin-top: 2rem;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    gap: 1rem;
    & :global(img) {
      overflow: hidden;
      flex: 1;
      width: 100%;
      border-radius: 2rem;
      height: auto;
      box-shadow: 0 1px 2px #000;
    }
  }

  .languages {
    display: flex;
    gap: 0.5rem;
    margin-top: 1rem;
  }

  .language {
    background: var(--primary-color);
    color: #000;
    display: flex;
    align-items: center;
    padding: 0 0.5rem 0 0.2rem;
    box-sizing: border-box;
    margin-left: 1rem;
    --size: 2rem;
    height: var(--size);
    position: relative;
    border-radius: 0 5px 5px 0;
    &:before {
      content: '';
      position: absolute;
      height: 1.4rem;
      left: -0.75rem;
      top: 50%;
      rotate: 0.625turn;
      translate: 0 -50%;
      border-radius: 0 5px 0 0;
      box-sizing: border-box;
      width: 1.4rem;
      background: var(--primary-color);
      z-index: -1;
    }
  }
</style>
