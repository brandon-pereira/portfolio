---
import ImageLightbox from '@components/Lightbox/ImageLightbox.astro';
import { Image } from 'astro:assets';
import { getCollection } from 'astro:content';

const apps = await getCollection('apps');
---

<section data-section="apps" class:list={['container', apps[0]?.data.theme]}>
  <div class="overhang"></div>
  <div class="content">
    <hr />
    <h2>
      <header class="main">
        <span class="subtext">I've got</span>
        <span class="maintext">Apps</span>
        <span class="subtext">for that</span>
      </header>
    </h2>
    <div class="apps--slides-container">
      {
        apps.map(async (app, index) => {
          const { Content } = await app.render();
          return (
            <div
              class:list={[
                'apps--slide app-container',
                { active: index === 0 }
              ]}
              data-styling={app.data.theme}
              data-active={index === 0}
            >
              <div class="icon-column">
                <Image
                  src={app.data.icon}
                  alt={`${app.data.appName} App Icon`}
                  width="200"
                  height="200"
                  quality={100}
                  class="icon"
                />
                {app.data.link ? (
                  <a class="cta" href={app.data.link} target="_">
                    get
                  </a>
                ) : (
                  ''
                )}
              </div>
              <div class="content-column">
                <h2>{app.data.appName}</h2>
                <Content />
                {app.data.media?.length && (
                  <div class="image-container">
                    {app.data.media?.map(img => (
                      <ImageLightbox
                        description={img.title}
                        src={img.url}
                        alt={img.title}
                        thumbProps={{
                          width:
                            img.url.height < img.url.width ? 800 : undefined,
                          height:
                            img.url.height > img.url.width ? 800 : undefined,
                          quality: 'max'
                        }}
                      />
                    ))}
                  </div>
                )}
              </div>
            </div>
          );
        })
      }
    </div>
    <div class="carousel-dots">
      {
        apps.map((_, index) => (
          <button
            class:list={['dot', { active: index === 0 }]}
            data-goto={index}
            aria-label={`Go to slide ${index + 1}`}
          />
        ))
      }
    </div>
  </div>
  <div class="carousel-arrows">
    <button class="prev" data-goto="prev" aria-label="Go to next slide"
    ></button>
    <button class="next" data-goto="next" aria-label="Go to previous slide"
    ></button>
  </div>
</section>

<style>
  header.main {
    position: relative;
    z-index: 1;
    text-align: center;
    transition: color 0.3s;
    margin-bottom: 3rem;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: min(6vw, 3rem);
    --main-size: min(30vw, 12rem);

    & .maintext {
      /* Layout */
      display: flex;
      flex-shrink: 0;
      align-items: center;
      justify-content: center;
      border: 3px solid;
      position: relative;
      border-radius: 50%;
      background: linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.2));
      width: var(--main-size);
      height: var(--main-size);
      /* Fonts */
      font-family: var(--font-monospace);
      line-height: var(--main-size);

      /* Hidden for pseudo */
      font-size: 0;

      &:before {
        content: 'Apps';
        position: absolute;
        /* makes the text look more centered */
        padding-left: 1vw;
        left: 50%;
        transform: translateX(-50%);
        -webkit-text-stroke: 1px black;
        top: 0;
        z-index: 1;
        font-size: calc(var(--main-size) / 3);
      }
      &:after {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        height: 100%;
        width: 100%;
        background: url('../assets/icon-grid.png');
        background-size: 80%;
        background-position: center;
        border-radius: 50%;
      }
    }
    & .subtext {
      text-shadow: 2px 2px rgba(0, 0, 0, 0.3);
      text-transform: uppercase;
      font-size: min(5vw, 30px);
    }
  }

  hr {
    border: 0;
    height: 1px;
    background: #333;
    background-image: linear-gradient(
      to right,
      rgba(0, 0, 0, 0.1),
      rgba(0, 0, 0, 0.5),
      rgba(0, 0, 0, 0.1)
    );
    margin: 3rem 0;
  }

  .container {
    --overhang-height: 20rem;
    margin-top: calc(var(--overhang-height) * -1);
    z-index: 0;
    position: relative;
    padding-top: var(--overhang-height);
    padding-bottom: 3rem;
    transition: background 0.5s;
    background-image: linear-gradient(transparent, rgba(0, 0, 0, 0.5));
    color: #fff;
    --grid-bg-1: rgba(0, 0, 0, 0.05);
    --grid-bg-2: rgba(0, 0, 0, 0.03);

    & .overhang {
      clip-path: polygon(0 0, 100% 0, 100% 0, 0 100%);
      position: absolute;
      top: -2px;
      left: 0;
      overflow: hidden;
      right: 0;
      height: var(--overhang-height);
      background: var(--background-color);
    }

    &:before {
      content: '';
      position: absolute;
      inset: 0;
      pointer-events: none;
      overflow: hidden;
      background-image: linear-gradient(var(--grid-bg-1) 2px, transparent 2px),
        linear-gradient(90deg, var(--grid-bg-1) 2px, transparent 2px),
        linear-gradient(var(--grid-bg-2) 1px, transparent 1px),
        linear-gradient(90deg, var(--grid-bg-2) 1px, transparent 1px);
      background-size:
        50px 50px,
        50px 50px,
        10px 10px,
        10px 10px;
    }
    &.wings-cheap {
      background-color: #ffc107;
      background-image: linear-gradient(transparent, rgba(0, 0, 0, 0.2));
      color: #000;
    }
    &.betterdo {
      background-color: #2196f3;
    }
    &.tv-tracker {
      background-color: #1e9a48;
    }
    &.remote {
      background-color: #f44336;
    }
  }

  .content {
    max-width: calc(var(--max-width));
    margin: 0 auto;
    overflow: hidden;
    position: relative;
    z-index: 5;
    pointer-events: none;
  }

  .apps--slides-container {
    position: relative;
    & .apps--slide {
      position: absolute;
      top: 0;
      left: 0;
      visibility: hidden;
      width: 100%;
      height: 100%;
      opacity: 0;
      transition:
        opacity 0.5s,
        translate 0.3s;
      translate: 50% 0%;
      &.active {
        position: static;
        opacity: 1;
        translate: 0 0;
        visibility: visible;
      }
    }
  }

  .app-container {
    pointer-events: all;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    justify-content: center;
    display: flex;
    overflow: hidden;
    margin: 0 auto 4rem;
    max-width: calc(var(--max-width) - 6rem);
    gap: 0.5rem;
    @media (--desktop) {
      flex-direction: row;
      gap: 3rem;
    }
    & .icon-column {
      transform: translateY(50%);
      opacity: 0;
      flex-shrink: 0;
      margin-bottom: 2rem;
      filter: drop-shadow(3px 3px 3px rgba(0, 0, 0, 0.5));
      & .icon {
        height: 100px;
        width: 100px;
        display: block;
        margin-bottom: 1.5rem;
      }
      & .cta {
        color: inherit;
        border: 1px solid;
        padding: 0 13px;
        border-radius: 5px;
        text-decoration: none;
        margin: 1rem 0 1.5rem;
        font-size: 20px;
        text-transform: uppercase;
        line-height: 22px;
        height: 22px;
      }
      @media (--desktop) {
        text-align: center;
        margin-bottom: 0;
      }
    }
    & .content-column {
      flex: 1;
      overflow: hidden;
      width: 100%;
      h2 {
        margin: 0;
      }
    }

    & .image-container {
      display: flex;
      flex-direction: row;
      align-items: center;
      overflow: hidden;
      justify-content: center;
      margin-top: 2rem;
      gap: 1rem;
      width: 100%;
      & :global(img) {
        transform: translateY(50%);
        opacity: 0;
        flex: 1;
        height: auto;
        width: auto;
        object-fit: contain;
        overflow: hidden;
        border-radius: 1rem;
        object-fit: contain;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
      }
    }

    &:global(.active) {
      & .icon-column {
        transition: all 0.2s 0.2s;
        transform: translateY(0);
        opacity: 1;
      }
      & .image-container :global(img) {
        transition: all 0.2s 0.3s;
        transform: translateY(0);
        opacity: 1;
        &:nth-of-type(2) {
          transition-delay: 0.4s;
        }
        &:nth-of-type(3) {
          transition-delay: 0.5s;
        }
      }
    }
  }

  .carousel-dots {
    pointer-events: all;
    margin: 0 auto;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.8rem;
    & .dot {
      background: rgba(255, 255, 255, 0.5);
      display: inline-block;
      height: 1.4rem;
      aspect-ratio: 1 / 1;
      border: none;
      border-radius: 50%;
      &.active {
        background: #fff;
      }
    }
  }

  .carousel-arrows {
    position: absolute;
    top: calc(var(--overhang-height) + 350px);
    height: 100px;
    left: 0;
    right: 0;
    display: flex;
    justify-content: space-between;
    button {
      background: rgba(255, 255, 255, 0.2);
      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);
      color: currentColor;

      border: none;
      padding: 0.4rem 1rem;
      border-radius: 0 1rem 1rem 0;
      &:before {
        content: '';
        display: block;
        color: #fff;
        width: 1rem;
        height: 1rem;
        border-style: solid;
        border-width: 0.2rem 0.2rem 0 0;
        transform: rotate(225deg);
        filter: drop-shadow(-1px -1px rgba(0, 0, 0, 0.4));
        position: relative;
        left: 0.25rem;
      }
      &.next {
        border-radius: 1rem 0 0 1rem;
        &:before {
          left: -0.25rem;
          transform: rotate(45deg);
        }
      }
    }
  }
</style>

<script>
  type GoToValue = number | 'next' | 'prev';

  class Apps {
    el = document.querySelector("[data-section='apps']") as HTMLElement;
    currentIndex: number = 0;
    slides: HTMLElement[] = [];
    currentSlide: HTMLElement | null = null;
    dots: HTMLElement[] = [];

    constructor() {
      if (!this.el) {
        return;
      }
      this.currentIndex = 0;
      this.slides = Array.from(
        this.el.querySelectorAll('.apps--slides-container .apps--slide')
      );
      this.currentSlide = this.slides[0]!;
      this.dots = Array.from(this.el.querySelectorAll('.carousel-dots .dot'));
      this.events();
    }

    events(): void {
      Array.from(this.el.querySelectorAll('[data-goto]')).forEach(el =>
        el.addEventListener('click', () => {
          const goto = el.getAttribute('data-goto') as GoToValue;
          this.goto(goto);
        })
      );

      // Swiping (mobile)
      let start = 0;
      let end = 0;

      this.slides.forEach(el =>
        el.addEventListener(
          'touchstart',
          event => {
            if (!event.changedTouches.length) return;
            start = event.changedTouches[0]!.screenX;
          },
          { passive: true }
        )
      );

      this.slides.forEach(el =>
        el.addEventListener(
          'touchend',
          event => {
            if (!event.changedTouches.length) return;
            end = event.changedTouches[0]!.screenX;
            handleGesture(start, end, 50);
          },
          { passive: true }
        )
      );

      const handleGesture = (
        touchstart: number,
        touchend: number,
        threshold: number
      ) => {
        if (touchend < touchstart && touchstart - touchend >= threshold) {
          this.goto('next');
        } else if (
          touchend > touchstart &&
          touchend - touchstart >= threshold
        ) {
          this.goto('prev');
        }
      };
    }

    goto(slide: GoToValue): void {
      switch (slide) {
        case 'next':
          this.setCurrentSlide(
            this.currentIndex + 1 < this.slides.length
              ? this.currentIndex + 1
              : 0
          );
          break;
        case 'prev':
          this.setCurrentSlide(
            this.currentIndex - 1 !== -1
              ? this.currentIndex - 1
              : this.slides.length - 1
          );
          break;
        default:
          if (!isNaN(slide)) {
            this.setCurrentSlide(Number(slide));
          } else {
            throw new Error(
              `Invalid slide, expected index and got ${typeof slide} ${slide}`
            );
          }
      }
    }

    setCurrentSlide(slide: number): void {
      // Get Elements
      const newSlide = this.slides[slide];
      const currentSlide = this.currentSlide;
      // Toggle classes on carousel slides
      currentSlide?.classList.remove('active');
      newSlide?.classList.add('active');
      // Change the main carousel styling
      this.el.setAttribute('data-current-slide', `${slide}`);
      this.el.classList.remove(
        currentSlide?.getAttribute('data-styling') || ''
      );
      this.el.classList.add(newSlide?.getAttribute('data-styling') || '');
      // Update Dot
      this.dots.forEach((el, i) => {
        if (i !== slide) {
          el.classList.remove('active');
        } else {
          el.classList.add('active');
        }
      });
      // Update References
      this.currentSlide = newSlide!;
      this.currentIndex = slide;

      // Analytics
      // this.logEvent("apps", "show-slide", `${slide}`);
    }
  }

  document.addEventListener('astro:page-load', () => {
    new Apps();
  });
</script>
