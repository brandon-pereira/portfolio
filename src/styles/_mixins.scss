/**
 * Flash mixins to be used in your project.
 */

/*
 * Mixins for screen sizes.
 * @include medium() {property: value} to add a property with a value to medium, or
 * @include large() {property: value} to do the same for large.
 * Please design mobile first.
 */
@mixin medium {
  @media only screen and (min-width: 600px) {
    @content;
  }
}

@mixin large {
  @media only screen and (min-width: 1000px) {
    @content;
  }
}

/**
 * Map Deep Get function to get n level deep from a
 * object. 
 * 
 * @author Hugo Giraudel
 * @param {Map} $map - Map
 * @param {Arglist} $keys - Key chain
 * @return {*} - Desired value
 */
@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}

@mixin aspect-ratio($width, $height) {
  position: relative;
  &:before {
    display: block;
    content: '';
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }
  > .content {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
}

/**
  * Responsive Fonts Mixin
  * https://css-tricks.com/snippets/css/fluid-typography/
  */
@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size) {
  $u1: unit($min-vw);
  $u2: unit($max-vw);
  $u3: unit($min-font-size);
  $u4: unit($max-font-size);

  @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
    & {
      font-size: $min-font-size;
      @media screen and (min-width: $min-vw) {
        font-size: calc(
          #{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} *
            ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)})
        );
      }
      @media screen and (min-width: $max-vw) {
        font-size: $max-font-size;
      }
    }
  }
}
